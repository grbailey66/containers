What is a container? 
-- Container images --

Container Image
A container image is a tar file containing tar files. Each of the tar file is a layer. Once all tar files 
have been extract into the same location then you have the container's filesystem.

This can be explored via Docker. Pull the layers onto your local system.

$ docker pull redis:3.2.11-alpine

Export the image into the raw tar format.

$ docker save redis:3.2.11-alpine > redis.tar
$ tar -xvf redis.tar
46a2fed8167f5d523f9a9c07f17a7cd151412fed437272b517ee4e46587e5557/
46a2fed8167f5d523f9a9c07f17a7cd151412fed437272b517ee4e46587e5557/VERSION
46a2fed8167f5d523f9a9c07f17a7cd151412fed437272b517ee4e46587e5557/json
46a2fed8167f5d523f9a9c07f17a7cd151412fed437272b517ee4e46587e5557/layer.tar
498654318d0999ce36c7b90901ed8bd8cb63d86837cb101ea1ec9bb092f44e59/
498654318d0999ce36c7b90901ed8bd8cb63d86837cb101ea1ec9bb092f44e59/VERSION
498654318d0999ce36c7b90901ed8bd8cb63d86837cb101ea1ec9bb092f44e59/json
498654318d0999ce36c7b90901ed8bd8cb63d86837cb101ea1ec9bb092f44e59/layer.tar
ad01e7adb4e23f63a0a1a1d258c165d852768fb2e4cc2d9d5e71698e9672093c/
ad01e7adb4e23f63a0a1a1d258c165d852768fb2e4cc2d9d5e71698e9672093c/VERSION
ad01e7adb4e23f63a0a1a1d258c165d852768fb2e4cc2d9d5e71698e9672093c/json
ad01e7adb4e23f63a0a1a1d258c165d852768fb2e4cc2d9d5e71698e9672093c/layer.tar
ca0b6709748d024a67c502558ea88dc8a1f8a858d380f5ddafa1504126a3b018.json
da2a73e79c2ccb87834d7ce3e43d274a750177fe6527ea3f8492d08d3bb0123c/
da2a73e79c2ccb87834d7ce3e43d274a750177fe6527ea3f8492d08d3bb0123c/VERSION
da2a73e79c2ccb87834d7ce3e43d274a750177fe6527ea3f8492d08d3bb0123c/json
da2a73e79c2ccb87834d7ce3e43d274a750177fe6527ea3f8492d08d3bb0123c/layer.tar
db1a23fc1daa8135a1c6c695f7b416a0ac0eb1d8ca873928385a3edaba6ac9a3/
db1a23fc1daa8135a1c6c695f7b416a0ac0eb1d8ca873928385a3edaba6ac9a3/VERSION
db1a23fc1daa8135a1c6c695f7b416a0ac0eb1d8ca873928385a3edaba6ac9a3/json
db1a23fc1daa8135a1c6c695f7b416a0ac0eb1d8ca873928385a3edaba6ac9a3/layer.tar
f07352aa34c241692cae1ce60ade187857d0bffa3a31390867038d46b1e7739c/
f07352aa34c241692cae1ce60ade187857d0bffa3a31390867038d46b1e7739c/VERSION
f07352aa34c241692cae1ce60ade187857d0bffa3a31390867038d46b1e7739c/json
f07352aa34c241692cae1ce60ade187857d0bffa3a31390867038d46b1e7739c/layer.tar
manifest.json
repositories

$ ls
46a2fed8167f5d523f9a9c07f17a7cd151412fed437272b517ee4e46587e5557
498654318d0999ce36c7b90901ed8bd8cb63d86837cb101ea1ec9bb092f44e59
ad01e7adb4e23f63a0a1a1d258c165d852768fb2e4cc2d9d5e71698e9672093c
ca0b6709748d024a67c502558ea88dc8a1f8a858d380f5ddafa1504126a3b018.json
da2a73e79c2ccb87834d7ce3e43d274a750177fe6527ea3f8492d08d3bb0123c
db1a23fc1daa8135a1c6c695f7b416a0ac0eb1d8ca873928385a3edaba6ac9a3
f07352aa34c241692cae1ce60ade187857d0bffa3a31390867038d46b1e7739c
manifest.json
redis.tar
repositories

# The image also includes metadata about the image, such as version information and tag names.
$ cat repositories
{"redis":{"3.2.11-alpine":"46a2fed8167f5d523f9a9c07f17a7cd151412fed437272b517ee4e46587e5557"}}

$ cat manifest.json
[{"Config":"ca0b6709748d024a67c502558ea88dc8a1f8a858d380f5ddafa1504126a3b018.json",
"RepoTags":["redis:3.2.11-alpine"],"Layers":["498654318d0999ce36c7b90901ed8bd8cb63d86837cb101ea1ec9bb092f44e59/layer.tar",
"ad01e7adb4e23f63a0a1a1d258c165d852768fb2e4cc2d9d5e71698e9672093c/layer.tar",
"da2a73e79c2ccb87834d7ce3e43d274a750177fe6527ea3f8492d08d3bb0123c/layer.tar",
"db1a23fc1daa8135a1c6c695f7b416a0ac0eb1d8ca873928385a3edaba6ac9a3/layer.tar",
"f07352aa34c241692cae1ce60ade187857d0bffa3a31390867038d46b1e7739c/layer.tar",
"46a2fed8167f5d523f9a9c07f17a7cd151412fed437272b517ee4e46587e5557/layer.tar"]}]

# Extracting a layer will show you which files that layer provides.
$ tar -xvf da2a73e79c2ccb87834d7ce3e43d274a750177fe6527ea3f8492d08d3bb0123c/layer.tar
etc/
etc/apk/
etc/apk/world
lib/
lib/apk/
lib/apk/db/
lib/apk/db/installed
lib/apk/db/lock
lib/apk/db/scripts.tar
lib/apk/db/triggers
sbin/
sbin/su-exec
var/
var/cache/
var/cache/misc/

# Creating Empty Image
As an image is just a tar file, an empty image can be created using the command below.

$ tar cv --files-from /dev/null | docker import - empty
sha256:2075388e7fadf2678210ffa432f02379c4afbbfa8a5c39ab06f3701dc2bc1ab3

# By importing the tar, the additional metadata will be created.
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
empty               latest              2075388e7fad        37 seconds ago      0B
redis               3.2.11-alpine       ca0b6709748d        14 months ago       20.7MB

# However, as the container doesn't contain anything, it can't start a process.

# Creating Image without Dockerfile
The previous idea of importing a Tar file can be extended to create an entire image from scratch.

To start, we'll use BusyBox as the base. This will provide us with the foundation linux commands. 
This is defined as the rootfs. The rootfs is...

Docker provides a script to download the BusyBox rootfs at 
https://github.com/moby/moby/blob/a575b0b1384b2ba89b79cbd7e770fbeb616758b3/contrib/mkimage/busybox-static

$ curl -LO https://raw.githubusercontent.com/moby/moby/a575b0b1384b2ba89b79cbd7e770fbeb616758b3/contrib/mkimage/busybox-static 
&& chmod +x busybox-static

$ ./busybox-static busybox

# Running the script will download the rootfs and main binaries.
$ ls -lha busybox
total 20K
drwxr-xr-x  5 root root 4.0K Aug  2 22:34 .
drwx------ 15 root root 4.0K Aug  2 22:34 ..
drwxr-xr-x  2 root root 4.0K Aug  2 22:34 bin
drwxr-xr-x  2 root root 4.0K Aug  2 22:34 sbin
drwxr-xr-x  4 root root 4.0K Aug  2 22:34 usr

# The default Busybox rootfs doesn't include any version information so let's created a file.
$ echo KatacodaPrivateBuild > busybox/release

# As before, the directory can be converted into a tar and automatically imported into Docker as an image.
$ tar -C busybox -c . | docker import - busybox
sha256:c294739382fc4c8742e4ddd4fc8af728c5266b5b770a3f1060878877268eec84

# This can now be launched as a container.
$ docker run busybox cat /release
KatacodaPrivateBuild

